/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AdminRouteImport } from './routes/admin'
import { Route as AdminBatchesRouteImport } from './routes/admin/batches'
import { Route as AdminCategoriesRouteImport } from './routes/admin/categories'
import { Route as AdminDashboardRouteImport } from './routes/admin/dashboard'
import { Route as AdminIndexRouteImport } from './routes/admin/index'
import { Route as AdminNotFoundRouteImport } from './routes/admin/not-found'
import { Route as AdminNoticeRouteImport } from './routes/admin/notice'
import { Route as AdminStoragesRouteImport } from './routes/admin/storages'
import { Route as IndexRouteImport } from './routes/index'
import { Route as LoginRouteImport } from './routes/login'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminRoute = AdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AdminIndexRoute = AdminIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminRoute,
} as any)
const AdminStoragesRoute = AdminStoragesRouteImport.update({
  id: '/storages',
  path: '/storages',
  getParentRoute: () => AdminRoute,
} as any)
const AdminNoticeRoute = AdminNoticeRouteImport.update({
  id: '/notice',
  path: '/notice',
  getParentRoute: () => AdminRoute,
} as any)
const AdminNotFoundRoute = AdminNotFoundRouteImport.update({
  id: '/not-found',
  path: '/not-found',
  getParentRoute: () => AdminRoute,
} as any)
const AdminDashboardRoute = AdminDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AdminRoute,
} as any)
const AdminCategoriesRoute = AdminCategoriesRouteImport.update({
  id: '/categories',
  path: '/categories',
  getParentRoute: () => AdminRoute,
} as any)
const AdminBatchesRoute = AdminBatchesRouteImport.update({
  id: '/batches',
  path: '/batches',
  getParentRoute: () => AdminRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/login': typeof LoginRoute
  '/admin/batches': typeof AdminBatchesRoute
  '/admin/categories': typeof AdminCategoriesRoute
  '/admin/dashboard': typeof AdminDashboardRoute
  '/admin/not-found': typeof AdminNotFoundRoute
  '/admin/notice': typeof AdminNoticeRoute
  '/admin/storages': typeof AdminStoragesRoute
  '/admin/': typeof AdminIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/admin/batches': typeof AdminBatchesRoute
  '/admin/categories': typeof AdminCategoriesRoute
  '/admin/dashboard': typeof AdminDashboardRoute
  '/admin/not-found': typeof AdminNotFoundRoute
  '/admin/notice': typeof AdminNoticeRoute
  '/admin/storages': typeof AdminStoragesRoute
  '/admin': typeof AdminIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/admin': typeof AdminRouteWithChildren
  '/login': typeof LoginRoute
  '/admin/batches': typeof AdminBatchesRoute
  '/admin/categories': typeof AdminCategoriesRoute
  '/admin/dashboard': typeof AdminDashboardRoute
  '/admin/not-found': typeof AdminNotFoundRoute
  '/admin/notice': typeof AdminNoticeRoute
  '/admin/storages': typeof AdminStoragesRoute
  '/admin/': typeof AdminIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/admin'
    | '/login'
    | '/admin/batches'
    | '/admin/categories'
    | '/admin/dashboard'
    | '/admin/not-found'
    | '/admin/notice'
    | '/admin/storages'
    | '/admin/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/admin/batches'
    | '/admin/categories'
    | '/admin/dashboard'
    | '/admin/not-found'
    | '/admin/notice'
    | '/admin/storages'
    | '/admin'
  id:
    | '__root__'
    | '/'
    | '/admin'
    | '/login'
    | '/admin/batches'
    | '/admin/categories'
    | '/admin/dashboard'
    | '/admin/not-found'
    | '/admin/notice'
    | '/admin/storages'
    | '/admin/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AdminRoute: typeof AdminRouteWithChildren
  LoginRoute: typeof LoginRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/admin/': {
      id: '/admin/'
      path: '/'
      fullPath: '/admin/'
      preLoaderRoute: typeof AdminIndexRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/storages': {
      id: '/admin/storages'
      path: '/storages'
      fullPath: '/admin/storages'
      preLoaderRoute: typeof AdminStoragesRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/notice': {
      id: '/admin/notice'
      path: '/notice'
      fullPath: '/admin/notice'
      preLoaderRoute: typeof AdminNoticeRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/not-found': {
      id: '/admin/not-found'
      path: '/not-found'
      fullPath: '/admin/not-found'
      preLoaderRoute: typeof AdminNotFoundRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/dashboard': {
      id: '/admin/dashboard'
      path: '/dashboard'
      fullPath: '/admin/dashboard'
      preLoaderRoute: typeof AdminDashboardRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/categories': {
      id: '/admin/categories'
      path: '/categories'
      fullPath: '/admin/categories'
      preLoaderRoute: typeof AdminCategoriesRouteImport
      parentRoute: typeof AdminRoute
    }
    '/admin/batches': {
      id: '/admin/batches'
      path: '/batches'
      fullPath: '/admin/batches'
      preLoaderRoute: typeof AdminBatchesRouteImport
      parentRoute: typeof AdminRoute
    }
  }
}

interface AdminRouteChildren {
  AdminBatchesRoute: typeof AdminBatchesRoute
  AdminCategoriesRoute: typeof AdminCategoriesRoute
  AdminDashboardRoute: typeof AdminDashboardRoute
  AdminNotFoundRoute: typeof AdminNotFoundRoute
  AdminNoticeRoute: typeof AdminNoticeRoute
  AdminStoragesRoute: typeof AdminStoragesRoute
  AdminIndexRoute: typeof AdminIndexRoute
}

const AdminRouteChildren: AdminRouteChildren = {
  AdminBatchesRoute: AdminBatchesRoute,
  AdminCategoriesRoute: AdminCategoriesRoute,
  AdminDashboardRoute: AdminDashboardRoute,
  AdminNotFoundRoute: AdminNotFoundRoute,
  AdminNoticeRoute: AdminNoticeRoute,
  AdminStoragesRoute: AdminStoragesRoute,
  AdminIndexRoute: AdminIndexRoute,
}

const AdminRouteWithChildren = AdminRoute._addFileChildren(AdminRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AdminRoute: AdminRouteWithChildren,
  LoginRoute: LoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
